import 'dart:ui';
import 'package:flutter/material.dart';
import '../../core/app_export.dart';

String _appTheme = "primary";

/// Helper class for managing themes and colors.
class ThemeHelper {
  // A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    _appTheme = _newTheme;
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: colorScheme.onErrorContainer,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(6.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      radioTheme: RadioThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.onErrorContainer;
          }
          return colorScheme.onSurface;
        }),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      floatingActionButtonTheme: FloatingActionButtonThemeData(
        backgroundColor: appTheme.indigo900,
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.indigo900,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.black90002,
          fontSize: 16.fSize,
          fontFamily: 'Oxygen',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: appTheme.gray60001,
          fontSize: 13.fSize,
          fontFamily: 'Oxygen',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.indigo100,
          fontSize: 9.fSize,
          fontFamily: 'Source Sans Pro',
          fontWeight: FontWeight.w400,
        ),
        headlineLarge: TextStyle(
          color: appTheme.blue300.withOpacity(0.5),
          fontSize: 32.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w600,
        ),
        headlineMedium: TextStyle(
          color: colorScheme.onErrorContainer,
          fontSize: 28.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w700,
        ),
        headlineSmall: TextStyle(
          color: appTheme.indigo900,
          fontSize: 25.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w500,
        ),
        labelLarge: TextStyle(
          color: appTheme.blueGray400,
          fontSize: 12.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w500,
        ),
        labelMedium: TextStyle(
          color: appTheme.black90002,
          fontSize: 11.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w500,
        ),
        labelSmall: TextStyle(
          color: appTheme.blue300,
          fontSize: 9.fSize,
          fontFamily: 'Source Sans Pro',
          fontWeight: FontWeight.w600,
        ),
        titleLarge: TextStyle(
          color: colorScheme.onError,
          fontSize: 20.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w600,
        ),
        titleMedium: TextStyle(
          color: appTheme.indigo900,
          fontSize: 16.fSize,
          fontFamily: 'Oxygen',
          fontWeight: FontWeight.w700,
        ),
        titleSmall: TextStyle(
          color: appTheme.black90002,
          fontSize: 15.fSize,
          fontFamily: 'Oxygen',
          fontWeight: FontWeight.w700,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFF142A68),
    primaryContainer: Color(0XFF8999B7),

    // Error colors
    errorContainer: Color(0XFF3F3D56),
    onError: Color(0XFF24265F),
    onErrorContainer: Color(0XFFFFFFFF),

    // On colors(text colors)
    onPrimary: Color(0XFFE8E8E8),
    onPrimaryContainer: Color(0XFF091629),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Black
  Color get black900 => Color(0XFF090A0A);
  Color get black90001 => Color(0XFF000002);
  Color get black90002 => Color(0XFF000000);

  // Blue
  Color get blue300 => Color(0XFF6699FF);
  Color get blueA400 => Color(0XFF3485FD);

  // BlueGray
  Color get blueGray100 => Color(0XFFCCCCCC);
  Color get blueGray10001 => Color(0XFFD9D9D9);
  Color get blueGray200 => Color(0XFFB9BECD);
  Color get blueGray300 => Color(0XFF9AA3B1);
  Color get blueGray400 => Color(0XFF8B8D9B);
  Color get blueGray40001 => Color(0XFF868686);
  Color get blueGray40002 => Color(0XFF828FAA);
  Color get blueGray40003 => Color(0XFF7B87A0);
  Color get blueGray500 => Color(0XFF727988);
  Color get blueGray50001 => Color(0XFF6D7C9B);
  Color get blueGray900 => Color(0XFF2C2F3B);
  Color get blueGray90001 => Color(0XFF33363F);

  // Gray
  Color get gray100 => Color(0XFFEFF2F9);
  Color get gray10001 => Color(0XFFF0F1FE);
  Color get gray10002 => Color(0XFFF2F3F4);
  Color get gray10003 => Color(0XFFF2F2F2);
  Color get gray200 => Color(0XFFEBEBEB);
  Color get gray20001 => Color(0XFFEEEEEE);
  Color get gray300 => Color(0XFFE3E3E3);
  Color get gray400 => Color(0XFFC3B8B8);
  Color get gray50 => Color(0XFFF3F7FF);
  Color get gray500 => Color(0XFFA7A0A0);
  Color get gray50001 => Color(0XFF8F95A0);
  Color get gray50002 => Color(0XFF9095A0);
  Color get gray5001 => Color(0XFFF9FAFB);
  Color get gray600 => Color(0XFF6D6D6D);
  Color get gray60001 => Color(0XFF807676);
  Color get gray60002 => Color(0XFF777777);
  Color get gray700 => Color(0XFF5E626D);
  Color get gray70001 => Color(0XFF6A5858);
  Color get gray800 => Color(0XFF534C4C);
  Color get gray80001 => Color(0XFF3E3B3B);

  // Graye
  Color get gray6001e => Color(0X1E767680);

  // Indigo
  Color get indigo100 => Color(0XFFC5D0E6);
  Color get indigo50 => Color(0XFFE1E6EF);
  Color get indigo900 => Color(0XFF012B68);
  Color get indigoA200 => Color(0XFF7876F5);

  // Indigoe
  Color get indigo2007e => Color(0X7E9BA9C6);

  // LightBlue
  Color get lightBlue100 => Color(0XFFA0DBFD);

  // LightGreen
  Color get lightGreen500 => Color(0XFF71DB3F);
  Color get lightGreenA100 => Color(0XFFC4EE85);

  // Red
  Color get red500 => Color(0XFFFF3838);

  // White
  Color get whiteA700 => Color(0XFFFDFDFD);

  // Yellow
  Color get yellow700 => Color(0XFFFDC534);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
